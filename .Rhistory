roll_se = rollapplyr(avg, k, sd, fill = NA) / sqrt(k))
ggplot(data = mutation_pos_roll, aes(x = position, group = span)) +
geom_line(aes(y = roll_avg, color = span)) +
theme_classic()
ggplot(data = mutation_pos_roll, aes(x = position, group = span, color = span)) +
geom_line(aes(y = roll_avg, color = span)) +
theme_classic()
haed(mutation_pos_roll)
head(mutation_pos_roll)
mutation_pos_roll |>
filter(gene == "net1")
mutation_pos_roll |>
filter(gene == "net1") |>
ggplot(aes(x = position, group = span, color = span)) +
geom_line(aes(y = roll_avg, color = span)) +
theme_classic()
mutation_pos_roll |>
filter(gene == "net1") |>
ggplot(aes(x = position, group = span)) +
geom_line(aes(y = roll_avg, color = span)) +
theme_classic()
summary(mutation_pos_roll)
mutation_pos_roll |>
filter(gene == "net1", span %% 5 == 0) |>
ggplot(aes(x = position, group = span)) +
geom_line(aes(y = roll_avg, color = span)) +
theme_classic()
colors_span <- colorRampPalette(c("#AA3377", "#EE7744", "#0077BB"))(5)
mutation_pos_roll |>
filter(gene == "net1", span %% 5 == 0) |>
ggplot(aes(x = position, group = span)) +
geom_line(aes(y = roll_avg, color = span)) +
scale_color_manual(values = colors_span)
colors_span <- colorRampPalette(c("#AA3377", "#EE7744", "#0077BB"))(5)
colors_span
mutation_pos_roll |>
filter(gene == "net1", span %% 5 == 0) |>
ggplot(aes(x = position, group = span)) +
geom_line(aes(y = roll_avg, color = span)) +
scale_fill_manual(values = colors_span)
mutation_pos_roll |>
filter(gene == "net1", span %% 5 == 0) |>
ggplot(aes(x = position, group = span)) +
geom_line(aes(y = roll_avg, color = span)) +
scale_fill_manual(values = colors_span) +
theme_classic()
head(shape_net1)
shape_net1 |>
ggplot(aes(x = i, y = `-log10(Probability)`)) +
geom_boxplot() +
theme_classic()
shape_net1 |>
ggplot(aes(group = i, y = `-log10(Probability)`)) +
geom_boxplot() +
theme_classic()
shape_net1 |>
mutate(chr_i = as.character(i)) |>
ggplot(aes(group = chr_i, y = `-log10(Probability)`)) +
geom_boxplot() +
theme_classic()
summary(shape_net1)
shape_net1 |>
mutate(chr_i = as.character(i)) |>
ggplot(aes(x = chr_i, y = `-log10(Probability)`)) +
geom_boxplot() +
theme_classic()
shape_net1 |>
mutate(chr_i = as.character(i)) |>
group_by(i) |>
mutate(mean_prob = summarize(mean(`-log10(Probability)`))) |>
ggplot(aes(x = chr_i, y = mean_prob)) +
geom_boxplot() +
theme_classic()
t_shape_net1 <- shape_net1 |>
mutate(chr_i = as.character(i)) |>
group_by(i) |>
mutate(mean_prob = summarize(mean(`-log10(Probability)`)))
t_shape_net1 <- shape_net1 |>
mutate(chr_i = as.character(i)) |>
group_by(i) |>
summarize(mean_prob = mean(`-log10(Probability)`))
head(t_shape_net1)
shape_net1 |>
group_by(i) |>
summarize(mean_prob = mean(`-log10(Probability)`)) |>
ggplot(aes(x = i, y = mean_prob)) +
geom_boxplot() +
theme_classic()
ggplot(aes(x = chr_i, y = mean_prob)) +
geom_boxplot() +
theme_classic()
shape_net1 |>
group_by(i) |>
summarize(mean_prob = mean(`-log10(Probability)`)) |>
mutate(chr_i = as.character(i)) |>
ggplot(aes(x = chr_i, y = mean_prob)) +
geom_boxplot() +
theme_classic()
shape_net1 |>
group_by(i) |>
summarize(mean_prob = mean(`-log10(Probability)`)) |>
mutate(chr_i = as.character(i)) |>
ggplot(aes(x = chr_i, y = mean_prob)) +
geom_line() +
theme_classic()
summary(t_shape_net1)
dim(t_shape_net1)
length(unique(t_shape_net1$i))
shape_net1 |>
group_by(i) |>
summarize(mean_prob = mean(`-log10(Probability)`)) |>
mutate(chr_i = as.character(i)) |>
ggplot(aes(x = chr_i, y = mean_prob)) +
geom_point() +
theme_classic()
shape_net1 |>
group_by(i) |>
summarize(mean_prob = mean(`-log10(Probability)`)) |>
mutate(chr_i = as.character(i)) |>
ggplot(aes(x = chr_i, y = mean_prob)) +
geom_line() +
theme_classic()
shape_net1 |>
group_by(i) |>
summarize(mean_prob = mean(`-log10(Probability)`)) |>
mutate(chr_i = as.character(i)) |>
ggplot(aes(x = chr_i, y = mean_prob)) +
geom_point() +
theme_classic()
head(deletion_oligo)
head(deletion_pos)
mutation_pos <- read_tsv("/Users/christophermoffatt/Desktop/lab/shuffle-mutation-mpra/l2fc_by_mutation_window.tsv", show_col_types = FALSE)|>
select(!`...12`) |>
mutate(mpra = "mutation")
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(zoo)
k <- 5
colors_span <- colorRampPalette(c("#AA3377", "#EE7744", "#0077BB"))(5)
mutation_pos <- read_tsv("/Users/christophermoffatt/Desktop/lab/shuffle-mutation-mpra/l2fc_by_mutation_window.tsv", show_col_types = FALSE)|>
select(!`...12`) |>
mutate(mpra = "mutation")
head(mutation_pos)
shuffle_pos <- read_tsv("/Users/christophermoffatt/Desktop/lab/shuffle-mutation-mpra/l2fc_by_shuffle_window.tsv", show_col_types = FALSE)|>
select(!`...6`) |>
mutate(mpra = "shuffle")
deletion_pos <- read_tsv("/Users/christophermoffatt/Desktop/lab/peak-oligo/excluding_base_enrichment_less_count.txt", show_col_types = FALSE) |>
select(!`...5`) |>
mutate(mpra = "deletion")
head(deletion_pos)
pair_mpra <- bind_rows(deletion_pos, mutation_pos, shuffle_pos)
head(pair_mpra)
head(mutation_oligo)
head(mutation_pos)
shuffle_pos <- read_tsv("/Users/christophermoffatt/Desktop/lab/shuffle-mutation-mpra/l2fc_by_shuffle_window.tsv", show_col_types = FALSE)|>
select(!`...6`) |>
mutate(mpra = "shuffle") |>
rename(log2fc = "enrichment")
deletion_pos <- read_tsv("/Users/christophermoffatt/Desktop/lab/peak-oligo/excluding_base_enrichment_less_count.txt", show_col_types = FALSE) |>
select(!`...5`) |>
mutate(mpra = "deletion") |>
rename(log2fc = "enrichment")
pair_mpra <- bind_rows(deletion_pos, mutation_pos, shuffle_pos)
head(pair_mpra)
pair_mpra <- bind_rows(deletion_pos, mutation_pos, shuffle_pos) |>
select(gene:mpra)
head(pair)
head(pair_mpra)
head(mean_bp_prob)
mean_bp_prob <- all_shape |>
group_by(gene, i) |>
summarise(mean_pob_log10 = mean(`-log10(Probability)`)) |> # avg of a given nt pairing with any other nt
rename("position" = i)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(zoo)
k <- 5
colors_span <- colorRampPalette(c("#AA3377", "#EE7744", "#0077BB"))(5)
mutation_oligo <- read.csv("/Users/christophermoffatt/Desktop/lab/shuffle-mutation-mpra/mutation_MPRA_gfp_fc.csv") |>
filter(which_mpra == "exp")
mutation_pos <- read_tsv("/Users/christophermoffatt/Desktop/lab/shuffle-mutation-mpra/l2fc_by_mutation_window.tsv", show_col_types = FALSE)|>
select(!`...12`) |>
mutate(mpra = "mutation")
shuffle_oligo <- read.csv("/Users/christophermoffatt/Desktop/lab/shuffle-mutation-mpra/gfp_norm_shuffle_fc.csv")
shuffle_pos <- read_tsv("/Users/christophermoffatt/Desktop/lab/shuffle-mutation-mpra/l2fc_by_shuffle_window.tsv", show_col_types = FALSE)|>
select(!`...6`) |>
mutate(mpra = "shuffle") |>
rename(log2fc = "enrichment")
deletion_oligo <- read.csv("/Users/christophermoffatt/Desktop/lab/peak-oligo/gfp_l2fc_less_count.txt")
deletion_pos <- read_tsv("/Users/christophermoffatt/Desktop/lab/peak-oligo/excluding_base_enrichment_less_count.txt", show_col_types = FALSE) |>
select(!`...5`) |>
mutate(mpra = "deletion") |>
rename(log2fc = "enrichment")
shape_net1 <- read_tsv("/Users/christophermoffatt/Desktop/lab/LE_SHAPE_Summary/LE_SHAPE_Summary_2/Pairing_Probabilities/Net1_LE_prob.dp", skip = 1, show_col_types = FALSE) |> # first line is just `300`, which throws off the parsing, so just skip
mutate(gene = "net1")
shape_net1_stats <- read_csv("/Users/christophermoffatt/Desktop/lab/LE_SHAPE_Summary/LE_SHAPE_Summary_2/Zscore_analysis/Net1_Sig_Diffs.csv")
shape_trak2 <- read_tsv("/Users/christophermoffatt/Desktop/lab/LE_SHAPE_Summary/LE_SHAPE_Summary_2/Pairing_Probabilities/Trak2_LE_prob.dp", skip = 1, show_col_types = FALSE) |>
mutate(gene = "trak2")
shape_trak2_stats <- read_csv("/Users/christophermoffatt/Desktop/lab/LE_SHAPE_Summary/LE_SHAPE_Summary_2/Zscore_analysis/Trak2_Sig_Diffs.csv")
shape_trp53 <- read_tsv("/Users/christophermoffatt/Desktop/lab/LE_SHAPE_Summary/LE_SHAPE_Summary_2/Pairing_Probabilities/trp53inp2_LE_prob.dp", skip = 1, show_col_types = FALSE) |>
mutate(gene = "trp53")
shape_trp53_stats <- read_csv("/Users/christophermoffatt/Desktop/lab/LE_SHAPE_Summary/LE_SHAPE_Summary_2/Zscore_analysis/trp53inp2_Sig_Diffs.csv")
all_shape <- rbind(shape_net1, shape_trak2, shape_trp53)
mutation_pos_roll <- mutation_pos |>
group_by(position, gene, span) |>
summarise(n = n(), avg = mean(log2fc), se = sd(log2fc)/sqrt(n())) |>
group_by(gene, span) |>
arrange(position) |>
mutate(roll_avg = rollmean(avg, k = k, fill = NA),
roll_se = rollapplyr(avg, k, sd, fill = NA) / sqrt(k))
mutation_pos_roll |>
filter(gene == "net1", span %% 5 == 0) |>
ggplot(aes(x = position, group = span)) +
geom_line(aes(y = roll_avg, color = span)) +
theme_classic()
t_shape_net1 <- shape_net1 |>
mutate(chr_i = as.character(i)) |>
group_by(i) |>
summarize(mean_prob = mean(`-log10(Probability)`))
t_shape_net1 |>
ggplot(aes(x = i, y = mean_prob)) +
geom_point() +
theme_classic()
t_shape_net1 |>
ungroup() |>
ggplot(aes(x = i, y = mean_prob)) +
geom_line() +
theme_classic()
mean_bp_prob <- all_shape |>
group_by(gene, i) |>
summarise(mean_pob_log10 = mean(`-log10(Probability)`)) |> # avg of a given nt pairing with any other nt
rename("position" = i)
pair_mpra <- bind_rows(deletion_pos, mutation_pos, shuffle_pos) |>
select(gene:mpra) |>
left_join()
head(mean_bp_prob)
pair_mpra <- bind_rows(deletion_pos, mutation_pos, shuffle_pos) |>
select(gene:mpra) |>
left_join(mean_bp_prob, by = ("gene", "position"))
pair_mpra <- bind_rows(deletion_pos, mutation_pos, shuffle_pos) |>
select(gene:mpra) |>
left_join(mean_bp_prob, by = c("gene", "position"))
head(pair_mpra)
head(mutation_pos_roll)
p1 <- mutation_pos_roll |>
filter(gene == "net1", span %% 5 == 0) |>
ggplot(aes(x = position, group = span)) +
geom_line(aes(y = roll_avg, color = span)) +
theme_classic()
library(patchwork)
p1 <- mutation_pos_roll |>
filter(gene == "net1", span %% 5 == 0) |>
ggplot(aes(x = position, group = span)) +
geom_line(aes(y = roll_avg, color = span)) +
theme_classic()
head(t_shape_net1)
t_shape_net1 |>
ggplot(aes(x = i, y = 1, fill = mean_prob)) +
geom_tile()
t_shape_net1 |>
ggplot(aes(x = i, y = 1, fill = mean_prob)) +
geom_tile() +
theme_classic()
t_shape_net1 |>
ggplot(aes(x = i, y = 1, fill = mean_prob)) +
geom_tile() +
theme_minimal()
t_shape_net1 |>
ggplot(aes(x = i, y = 1, fill = mean_prob)) +
geom_tile() +
theme_void()
p2 <- t_shape_net1 |>
ggplot(aes(x = i, y = 1, fill = mean_prob)) +
geom_tile() +
theme_void()
p1/p2
#| echo: false
library(tidyr)
library(seqinr)
library(R4RNA)
install.packages(R4RNA)
install.packages("R4RNA")
BiocManager::install("R4RNA")
install.packages("remotes")
remotes::install_github("JPSieg/R2easyR")
t2 <- R2easyR::read.ct("LE_SHAPE_Summary_2/CT_files/Trak2_LE_structures.ct")
head(t2)
t2 <- R2easyR::read.ct("LE_SHAPE_Summary_2/CT_files/Trak2_LE_structures.ct") |>
R2easyR::add.dot.bracket()
head(t2)
summary(t2)
View(t2)
t2 <- R2easyR::read.ct("LE_SHAPE_Summary_2/CT_files/Trak2_LE_structures.ct")
t2_t <- R2easyR::add.dot.bracket(t2)
head(t2)
View(t2)
t2db <- ".........(((...(((....(((((..((..((((((((..........))))).)))..))............))))).(((...(((.............)))...))))))...)))...............((.(((((.((..((..(((((((((((((.((((..((((............((((..............)))).......))))..)))).)))))))))((((...((((......)))))))).........))))..))))))))).))........." |>
strsplit("") |>
unlist() |>
cbind(t2)
head(t2)
tail(t2)
#t2_t <- R2easyR::add.dot.bracket(t2)
# throwing error: Warning: NAs introduced by coercionError in if (as.numeric(as.character(ctdata_frame$BP[i])) > as.numeric(as.character(ctdata_frame$N[i]))) { : missing value where TRUE/FALSE needed, so just using https://rna.urmc.rochester.edu/RNAstructureWeb/Servers/ct2dot/ct2dot.html
t2sq <- "GCUUCGAUAUCCGCAUGCUAAACCACUAACUGACCUCGUGUAUAAAUUAGCACAUGAAGGAGAGAGAUGCACUGAGAGUGGAGACCGGCCUAACUUGAGAGAAAAGGGAUGUUGCAGAAGGACUGUGAAUGUGGAGAGAGCGCAGUGAAGGGAUAGGACGUUUGUUUGCAAGAGGGUCUUUGAGGAUGGAGUCUAGUAAACAAAGUGGGGACAAGUGAUGACCAGUUUGGAGACAAAUGGAAGAAAGGGUUAGUUUGCUCCUUCAGCUACGUUUCCUUGCCUCUUGCGGUCGCACUAGUG" |>
strsplit("") |>
unlist()
t2df <- tibble(seq = t2sq,
dotbracket = t2db)
t2db <- ".........(((...(((....(((((..((..((((((((..........))))).)))..))............))))).(((...(((.............)))...))))))...)))...............((.(((((.((..((..(((((((((((((.((((..((((............((((..............)))).......))))..)))).)))))))))((((...((((......)))))))).........))))..))))))))).))........." |>
strsplit("") |>
unlist()
t2df <- tibble(seq = t2sq,
dotbracket = t2db)
head(t2df)
?viennaToHelix
??viennaToHelix
library(R4RNA)
t2db |> viennaToHelix()
".........(((...(((....(((((..((..((((((((..........))))).)))..))............))))).(((...(((.............)))...))))))...)))...............((.(((((.((..((..(((((((((((((.((((..((((............((((..............)))).......))))..)))).)))))))))((((...((((......)))))))).........))))..))))))))).))........." |> viennaToHelix()
".........(((...(((....(((((..((..((((((((..........))))).)))..))............))))).(((...(((.............)))...))))))...)))...............((.(((((.((..((..(((((((((((((.((((..((((............((((..............)))).......))))..)))).)))))))))((((...((((......)))))))).........))))..))))))))).))........." |> viennaToHelix() |> collapseHelix()
#t2_t <- R2easyR::add.dot.bracket(t2)
# throwing error: Warning: NAs introduced by coercionError in if (as.numeric(as.character(ctdata_frame$BP[i])) > as.numeric(as.character(ctdata_frame$N[i]))) { : missing value where TRUE/FALSE needed, so just using https://rna.urmc.rochester.edu/RNAstructureWeb/Servers/ct2dot/ct2dot.html
t2sq <- "GCUUCGAUAUCCGCAUGCUAAACCACUAACUGACCUCGUGUAUAAAUUAGCACAUGAAGGAGAGAGAUGCACUGAGAGUGGAGACCGGCCUAACUUGAGAGAAAAGGGAUGUUGCAGAAGGACUGUGAAUGUGGAGAGAGCGCAGUGAAGGGAUAGGACGUUUGUUUGCAAGAGGGUCUUUGAGGAUGGAGUCUAGUAAACAAAGUGGGGACAAGUGAUGACCAGUUUGGAGACAAAUGGAAGAAAGGGUUAGUUUGCUCCUUCAGCUACGUUUCCUUGCCUCUUGCGGUCGCACUAGUG" |>
t2db <- ".........(((...(((....(((((..((..((((((((..........))))).)))..))............))))).(((...(((.............)))...))))))...)))...............((.(((((.((..((..(((((((((((((.((((..((((............((((..............)))).......))))..)))).)))))))))((((...((((......)))))))).........))))..))))))))).))........." |>
t2df <- tibble(seq = t2sq,
dotbracket = t2db)
#t2_t <- R2easyR::add.dot.bracket(t2)
# throwing error: Warning: NAs introduced by coercionError in if (as.numeric(as.character(ctdata_frame$BP[i])) > as.numeric(as.character(ctdata_frame$N[i]))) { : missing value where TRUE/FALSE needed, so just using https://rna.urmc.rochester.edu/RNAstructureWeb/Servers/ct2dot/ct2dot.html
t2sq <- "GCUUCGAUAUCCGCAUGCUAAACCACUAACUGACCUCGUGUAUAAAUUAGCACAUGAAGGAGAGAGAUGCACUGAGAGUGGAGACCGGCCUAACUUGAGAGAAAAGGGAUGUUGCAGAAGGACUGUGAAUGUGGAGAGAGCGCAGUGAAGGGAUAGGACGUUUGUUUGCAAGAGGGUCUUUGAGGAUGGAGUCUAGUAAACAAAGUGGGGACAAGUGAUGACCAGUUUGGAGACAAAUGGAAGAAAGGGUUAGUUUGCUCCUUCAGCUACGUUUCCUUGCCUCUUGCGGUCGCACUAGUG"
t2db <- ".........(((...(((....(((((..((..((((((((..........))))).)))..))............))))).(((...(((.............)))...))))))...)))...............((.(((((.((..((..(((((((((((((.((((..((((............((((..............)))).......))))..)))).)))))))))((((...((((......)))))))).........))))..))))))))).))........."
t2df <- t2db |>
viennaToHelix() |>
mutate(value = unlist(strsplit(t2sq)))
#| echo: false
library(tidyr)
library(seqinr)
library(R4RNA)
t2df <- t2db |>
viennaToHelix() |>
mutate(value = unlist(strsplit(t2sq)))
?mutate
library(dplyr)
t2df <- t2db |>
viennaToHelix() |>
mutate(value = unlist(strsplit(t2sq)))
unlist(strsplit(t2sq)
)
t2df <- t2db |>
viennaToHelix() |>
mutate(value = unlist(strsplit(t2sq, "")))
#| echo: false
library(tidyr)
library(dplyr)
library(seqinr)
library(R4RNA)
#| echo: false
#| ## from scramble-LE-MPRA.Rmd
# mutates a DNA string such that none of the bases have their original identity
mutate_dna <- function(string) {
new_seq <- c()
list_bases <- string |>
strsplit("") |> #make into a list of characters
unlist()
for (i in 1:length(list_bases)){ # switch statement to turn a base into any base that is not the orginal, more compact than many if statements
mutant_bases <- switch(EXPR = list_bases[i], # https://www.geeksforgeeks.org/switch-case-in-r/ example 2
"A" = c("T", "C", "G"),
"T" = c("A", "C", "G"),
"C" = c("T", "A", "G"),
"G" = c("T", "A", "C"))
new_seq[i] <- sample(mutant_bases, 1)
}
output <- paste(new_seq, collapse = "")
return(output)
}
# makes mutations based on predicted structures
mutate_structure <- function(LEsequence, viennaDotBracket, LEname, n_times = 3) { ##! add n_times for loop outside everything else
# initialize lists to store seqs and names
seqs <- c()
names <- c()
# use R4RNA to convet the dot braket to a table of base pairs by index
basepairs <- viennaDotBracket %>% # data frame of pairs (i and j) by position
viennaToHelix(.)
basepairs_collapse <- basepairs %>% # start of each helix, arranged by index of the the "left" strand
collapseHelix(.) %>%
arrange(., i)
# numbering helices
helix_number <- 0
row_num <- 1
len_bp <- nrow(basepairs) #used to stop an error with while statement
for (x in 1:nrow(basepairs_collapse)) {
h_end <- basepairs_collapse$i[x] + basepairs_collapse$length[x] - 1 #calc helix end
helix_number <- helix_number + 1
while (basepairs$i[row_num] <=  h_end) { #while the position index is <= helix end index
basepairs$value[row_num] <- helix_number
row_num <- row_num + 1
if (row_num > len_bp){ #deals with an error when row_num > number of rows in the df
break
}
}
}
# left mutations (to the 'i' indices)
for (x in 1:helix_number) {
helix_x <- basepairs %>%
filter(value == x)
s <- min(helix_x$i) # start of helix
e <- max(helix_x$i) # end of helix
upstream <- str_sub(LEsequence, start = 1, end = s-1) #sequence upstream of window
downstream <- str_sub(LEsequence, start = e+1, end = 260) #sequence downstream of window
for (y in 1:n_times) {
mutated <- str_sub(LEsequence, start = s, end = e) %>%
mutate_dna()
seqs[length(seqs)+1] <- paste(upstream, mutated, downstream, sep = "") %>% #append sequence to list
paste("GCTTCGATATCCGCATGCTA", ., "CTCTTGCGGTCGCACTAGTG", sep = "") #add PCR handles
names[length(names)+1] <- LEname %>%
paste(., "_", as.character(s), ":", as.character(e), "_", as.character(y), #based on "n_times variable"
sep = "")
}
}
# right mutations (to the 'j' indices)
for (x in 1:helix_number) {
helix_x <- basepairs %>%
filter(value == x)
s <- min(helix_x$j)
e <- max(helix_x$j)
upstream <- str_sub(LEsequence, start = 1, end = s-1) #sequence upstream of window
downstream <- str_sub(LEsequence, start = e+1, end = 260) #sequence downstream of window
for (y in 1:n_times) {
mutated <- str_sub(LEsequence, start = s, end = e) %>%
mutate_dna()
seqs[length(seqs)+1] <- paste(upstream, mutated, downstream, sep = "") %>% #append sequence to list
paste("GCTTCGATATCCGCATGCTA", ., "CTCTTGCGGTCGCACTAGTG", sep = "") #add PCR handles
names[length(names)+1] <- LEname %>%
paste(., "_", as.character(s), ":", as.character(e), "_", as.character(y), #based on "n_times variable"
sep = "")
}
}
# compensatory (to both)
for (x in 1:helix_number) {
helix_x <- basepairs %>%
filter(value == x)
s <- min(helix_x$i)
e <- max(helix_x$i)
s_j <- min(helix_x$j)
e_j <- max(helix_x$j)
upstream <- str_sub(LEsequence, start = 1, end = s-1) #sequence upstream of window
midstream <- str_sub(LEsequence, start = e+1, end = s_j-1) #sequence between helicies
downstream <- str_sub(LEsequence, start = e_j+1, end = 260)
for (y in 1:n_times) {
mutated <- str_sub(LEsequence, start = s, end = e) %>%
mutate_dna()
list_bases <- mutated %>%
strsplit(., "") %>% #make into a list of characters
unlist(.)
complement <- c()
for (i in 1:length(list_bases)){ #getting comlementry seq
complement[i] <- switch(EXPR = list_bases[i],
"A" = "T",
"T" = "A",
"C" = "G",
"G" = "C")
}
rev_comp <- complement %>%
rev(.) %>%
paste(., collapse = "")
seqs[length(seqs)+1] <- paste(upstream, mutated, midstream, rev_comp, downstream, sep = "") %>% #append sequence to list # complement should be rev_comp?
paste("GCTTCGATATCCGCATGCTA", ., "CTCTTGCGGTCGCACTAGTG", sep = "") #add PCR handles
names[length(names)+1] <- LEname %>%
paste(., "_", as.character(s), ":", as.character(e),"::",
as.character(s_j), ":", as.character(e_j), "_", as.character(y), #based on "n_times variable"
sep = "")
}
}
output <- cbind(names, seqs) %>%
as.data.frame(.)
return(output)
}
t2 <- R2easyR::read.ct("LE_SHAPE_Summary_2/CT_files/Trak2_LE_structures.ct")
#t2_t <- R2easyR::add.dot.bracket(t2)
# throwing error: Warning: NAs introduced by coercionError in if (as.numeric(as.character(ctdata_frame$BP[i])) > as.numeric(as.character(ctdata_frame$N[i]))) { : missing value where TRUE/FALSE needed, so just using https://rna.urmc.rochester.edu/RNAstructureWeb/Servers/ct2dot/ct2dot.html
t2sq <- "GCUUCGAUAUCCGCAUGCUAAACCACUAACUGACCUCGUGUAUAAAUUAGCACAUGAAGGAGAGAGAUGCACUGAGAGUGGAGACCGGCCUAACUUGAGAGAAAAGGGAUGUUGCAGAAGGACUGUGAAUGUGGAGAGAGCGCAGUGAAGGGAUAGGACGUUUGUUUGCAAGAGGGUCUUUGAGGAUGGAGUCUAGUAAACAAAGUGGGGACAAGUGAUGACCAGUUUGGAGACAAAUGGAAGAAAGGGUUAGUUUGCUCCUUCAGCUACGUUUCCUUGCCUCUUGCGGUCGCACUAGUG"
t2db <- ".........(((...(((....(((((..((..((((((((..........))))).)))..))............))))).(((...(((.............)))...))))))...)))...............((.(((((.((..((..(((((((((((((.((((..((((............((((..............)))).......))))..)))).)))))))))((((...((((......)))))))).........))))..))))))))).))........."
t2df <- t2db |>
viennaToHelix() |>
mutate(value = unlist(strsplit(t2sq, "")))
t2df <- t2db |>
viennaToHelix()
head(t2df)
t2df <- t2db |>
viennaToHelix() |>
collapseHelix()
t2df
t2df <- t2db |>
viennaToHelix() |>
collapseHelix() |>
arrange(i)
t2df
t2df <- t2db |>
viennaToHelix()
t2df
View(t2df)
?viennaToHelix
#| echo: false
library(tidyr)
library(dplyr)
library(seqinr)
library(R4RNA)
?viennaToHelix
?cumsum
cumsum(1:10)
